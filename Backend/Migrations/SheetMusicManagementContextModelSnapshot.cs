// <auto-generated />
using System;
using System.Collections.Generic;
using Backend.DbContexts;
using Backend.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(SheetMusicManagementContext))]
    partial class SheetMusicManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "instrument", new[] { "undefined", "melody", "soprano", "soprano2", "alto", "alto2", "tenor", "tenor2", "bass", "bass2", "organ", "piano", "accordion", "flute" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "sheet_music_type", new[] { "undefined", "main_piece", "improvisation", "prelude" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Types.Person", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Backend.Types.SheetMusic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<Instrument>>("AvailableInstruments")
                        .IsRequired()
                        .HasColumnType("instrument[]");

                    b.Property<bool>("ChordsSpecified")
                        .HasColumnType("boolean");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("NumberInCollection")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfPages")
                        .HasColumnType("bigint");

                    b.Property<long?>("PageInCollection")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("SheetMusicCollectionId")
                        .HasColumnType("bigint");

                    b.Property<List<SheetMusicType>>("SheetMusicTypes")
                        .IsRequired()
                        .HasColumnType("sheet_music_type[]");

                    b.Property<long>("SongId")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SheetMusicCollectionId");

                    b.HasIndex("SongId");

                    b.ToTable("SheetMusic");
                });

            modelBuilder.Entity("Backend.Types.SheetMusicCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AvailableAsFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("AvailableOnPaper")
                        .HasColumnType("boolean");

                    b.Property<long?>("BaseCollectionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CompleteRegistered")
                        .HasColumnType("boolean");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool?>("IsSinglePaper")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("BaseCollectionId");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Backend.Types.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<string>>("AlternativeLanguagesTitles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("AlternativeTitles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long?>("ComposerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CopyWriterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.HasIndex("CopyWriterId");

                    b.HasIndex("Id");

                    b.HasIndex("Title");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Backend.Types.Person", b =>
                {
                    b.HasOne("Backend.Types.SheetMusic", null)
                        .WithOne("Arranger")
                        .HasForeignKey("Backend.Types.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Types.SheetMusicCollection", null)
                        .WithOne("Author")
                        .HasForeignKey("Backend.Types.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Types.Song", null)
                        .WithOne("Arranger")
                        .HasForeignKey("Backend.Types.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Types.SheetMusic", b =>
                {
                    b.HasOne("Backend.Types.SheetMusicCollection", "SheetMusicCollection")
                        .WithMany("SheetMusic")
                        .HasForeignKey("SheetMusicCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Types.Song", "Song")
                        .WithMany("SheetMusic")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SheetMusicCollection");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Backend.Types.SheetMusicCollection", b =>
                {
                    b.HasOne("Backend.Types.SheetMusicCollection", "BaseCollection")
                        .WithMany()
                        .HasForeignKey("BaseCollectionId");

                    b.Navigation("BaseCollection");
                });

            modelBuilder.Entity("Backend.Types.Song", b =>
                {
                    b.HasOne("Backend.Types.Person", "Composer")
                        .WithMany()
                        .HasForeignKey("ComposerId");

                    b.HasOne("Backend.Types.Person", "CopyWriter")
                        .WithMany()
                        .HasForeignKey("CopyWriterId");

                    b.Navigation("Composer");

                    b.Navigation("CopyWriter");
                });

            modelBuilder.Entity("Backend.Types.SheetMusic", b =>
                {
                    b.Navigation("Arranger");
                });

            modelBuilder.Entity("Backend.Types.SheetMusicCollection", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("SheetMusic");
                });

            modelBuilder.Entity("Backend.Types.Song", b =>
                {
                    b.Navigation("Arranger");

                    b.Navigation("SheetMusic");
                });
#pragma warning restore 612, 618
        }
    }
}
